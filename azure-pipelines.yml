# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm run build
  displayName: 'npm install and build'
  continueOnError: true
- script: |
    npm run ci:wdio
    npm run generate:allure
  displayName: 'Run wdio tests and generate allure reports'
  continueOnError: true
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'wr-results.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/output'
  continueOnError: true
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/report'
    artifact: 'Allure Results'
    publishLocation: 'pipeline'
  continueOnError: true
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $AzureDevOpsPAT = {PAT}
      $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($AzureDevOpsPAT)")) }
      $UriOrga = "https://dev.azure.com/ravieinbox/WDIO-CI-AZURE/" 
      $uriAccount = $UriOrga + "_apis/test/runs?api-version=6.0"
      $response = Invoke-RestMethod -Uri $uriAccount -Headers $AzureDevOpsAuthenicationHeader -Method Get
      $testRunsIdSorted = $response.value | sort-object id -Descending
      $result = Invoke-RestMethod -Uri https://dev.azure.com/ravieinbox/WDIO-CI-AZURE/_apis/test/runs/$($testRunsIdSorted[0].id)?api-version=6.0 -Headers $AzureDevOpsAuthenicationHeader -Method Get
      Write-Host "results = $($result | ConvertTo-Json -Depth 100)"
      Write-Host "##vso[task.setvariable variable=runId]$($result.id | ConvertTo-Json -Depth 100)"
  continueOnError: true
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $AzureDevOpsPAT = {PAT}
      $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($AzureDevOpsPAT)")) }
      $result = Invoke-RestMethod -Uri https://dev.azure.com/ravieinbox/WDIO-CI-AZURE/_apis/test/runs/$(runId)/results?api-version=6.0 -Headers $AzureDevOpsAuthenicationHeader -Method Get
      foreach($Run in $result.value){
      If($Run.outcome -eq "Failed"){
      $TestResultID = $Run.id
      $TestTitle=$Run.testCase.name
      $CharArray =$TestTitle.Split(".")
      $TestCase=$CharArray[6]
      $CharArraytwo=$TestCase.Split("(")
      $TestName =$CharArraytwo[0]
      $file= [IO.File]::ReadAllBytes("$(System.DefaultWorkingDirectory)\{Source alias}\tests\{testproject}\bin\Release\$TestName.png")
      $Base64file= [Convert]::ToBase64String($file)
      $TestResultAttachmentURL = "https://dev.azure.com/ravieinbox/WDIO-CI-AZURE/_apis/test/Runs/$(runId)/results/$($TestResultID)/attachments?api-version=6.0-preview.1" 
      
      $body =@"
      {
        "stream": "$Base64file",
        "fileName": "$TestName.png",
        "comment": "Test attachment upload",
        "attachmentType": "GeneralAttachment"
      }
      "@
      $TestResultAttachmentResult = Invoke-RestMethod -Uri $TestResultAttachmentURL -ContentType "application/json" -Body $body -Headers $AzureDevOpsAuthenicationHeader -Method POST
      }
      }
  continueOnError: true
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/report/allure-report/index.html'
    artifact: 'htmlreport'
    publishLocation: 'pipeline'
  continueOnError: true
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/report'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  continueOnError: true